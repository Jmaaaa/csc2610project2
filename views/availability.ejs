<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Availability</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <%- include('components/bootstrap') %>
    </head>
    <body>
      <div class="d-flex flex-column h-100">
        <%- include('components/navbar') %>

        <div class="container">
          <div class="search mt-5 mb-3">
            <input type="text" class="form-control" id='searchbar' placeholder="Search..."></input>
          </div>
          <div class="parking">
          </div>
        </div>

      </div>

      <script>
        const days = [
          'Monday',
          'Tuesday',
          'Wednesday',
          'Thursday',
          'Friday'
        ];

        function getParkingForDay(filter, parent, type, day) {
          return fetch(`api/getParking/${type}/${day}?filter=${filter}`)
            .then((res) => res.json())
            .then((json) => {
              if (json.length === 0) {
                return false;
              }

              // console.log(JSON.stringify(json));
              let table = $(`<table class='table'></table>`);

              // Add header.
              let header = $(`<thead>
                <tr>
                  <th scope='col'>Lot Name</th>
                  <th scope='col'>Lot Number</th>
                  <th scope='col'>Total Spaces</th>
                  <th scope='col'>7:00 am</th>
                  <th scope='col'>11:00 am</th>
                  <th scope='col'>2:00 pm</th>
                  <th scope='col'>4:00 pm</th>
                </tr>
              </thead>`);
              table.append(header);

              let tbody = $(`<tbody></tbody>`);
              
              for (const lot of json) {
                if (!lot.day)
                  continue;
                
                // console.log(JSON.stringify(lot));
                let row = $(`<tr>
                  <td>${lot.lotName}</td>
                  <td>${lot.lotNumber}</td>
                  <td>${lot.totalSpaces}</td>
                  <td>${(lot.day.percentFull[0] ? lot.day.percentFull[0] + "% Full" : "No Data")}</td>
                  <td>${(lot.day.percentFull[1] ? lot.day.percentFull[1] + "% Full" : "No Data")}</td>
                  <td>${(lot.day.percentFull[2] ? lot.day.percentFull[2] + "% Full" : "No Data")}</td>
                  <td>${(lot.day.percentFull[3] ? lot.day.percentFull[3] + "% Full" : "No Data")}</td>
                </tr>`);
                tbody.append(row);
              }
              table.append(tbody);

              parent.append(table);
              return true;
            });
        }

        function addParkingType(filter, type) {
          let parent = $(".parking");

          let group = $(`<div class='container border rounded mb-4 p-4'>
              <h2 class='mb-3'>${type}</h2>
            </div>`);

          let dayIndex = 0;
          let anyHadParking = false;
          let promiseIndex = 0;
          for (const day of days) {
            let card = $(`<div class='card mt-1'></div>`);
            let cardHeader = $(`<h5 class='card-header'>${day}</h5>`);
            card.append(cardHeader);

            let curDayIndex = dayIndex;
            cardHeader.click(() => {
              let body = card.find('.card-body');
              if (body.length !== 0) {
                // Toggle body visibility.
                body.collapse('toggle');
              }
              // else {
                // Create the body and populate the values.
                // let cardBody = $("<div class='card-body collapse table-responsive'></div>");
                // getParkingForDay(cardBody, type, day);
                // cardBody.collapse('toggle');
                // card.append(cardBody);
              // }
            });

            let cardBody = $("<div class='card-body collapse table-responsive'></div>");

            promiseIndex++;
            let promiseHasParking = getParkingForDay(filter, cardBody, type, day);

            if (filter) {
              cardBody.collapse('toggle');
            }
            
            card.append(cardBody);

            
            // card.append(cardBody);
            // group.append(card);
            dayIndex++;

            promiseHasParking.then(hadParking => {
              if (hadParking) {
                group.append(card);

                if (!anyHadParking) {
                  anyHadParking = true;
                  parent.append(group);
                }
              }
            });
          }

          // parent.append(group);
        }

        function updateParking(filter) {
          fetch('api/getTypes').then((res) => {
          return res.json();
            })
            .then((json) => {
                $(".parking").empty();
          
                for (const parkingType of json) {
                  addParkingType(filter, parkingType);
                }
            });
        }
        updateParking('');

        let searchbar = $('#searchbar');
        searchbar.keyup(function () {
          console.log('search ' + searchbar.val());
          updateParking(searchbar.val().trim());
        });


      </script>
    </body>
</html>